import{r as e,o as t,c as n,u as a,a as o,w as s,b as l,d as r,F as d,e as i,f as c,g as p,h,t as u,i as m,v as f,j as y,k as g,l as v,V as x}from"./vendor.d0447e24.js";!function(e=".",t="__import__"){try{self[t]=new Function("u","return import(u)")}catch(n){const a=new URL(e,location),o=e=>{URL.revokeObjectURL(e.src),e.remove()};self[t]=e=>new Promise(((n,s)=>{const l=new URL(e,a);if(self[t].moduleMap[l])return n(self[t].moduleMap[l]);const r=new Blob([`import * as m from '${l}';`,`${t}.moduleMap['${l}']=m;`],{type:"text/javascript"}),d=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(r),onerror(){s(new Error(`Failed to import: ${e}`)),o(d)},onload(){n(self[t].moduleMap[l]),o(d)}});document.head.appendChild(d)})),self[t].moduleMap={}}}("https:/toyshome.github.io/animation/dist/assets/");const k={name:"HelloWorld",props:{msg:String},data:()=>({count:0})};k.render=function(a,o,s,l,r,d){const i=e("router-view");return t(),n(i)};const b={setup(e,t){const n=a(),s=o(0);return n.beforeEach(((e,t)=>{s.value=e.meta.menuIndex||0})),{activeKey:s}}};b.render=function(a,o,r,d,i,c){const p=e("van-sidebar-item"),h=e("van-sidebar");return t(),n(h,{modelValue:d.activeKey,"onUpdate:modelValue":o[1]||(o[1]=e=>d.activeKey=e)},{default:s((()=>[l(p,{title:"运动合成",to:"/compose"}),l(p,{title:"CSS3D动画",to:"/css3d"}),l(p,{title:"SVG动画",to:"/svg"})])),_:1},8,["modelValue"])};const w={name:"App",components:{HelloWorld:k,Menu:b}},C={class:"container"};w.render=function(a,o,s,r,d,i){const c=e("Menu"),p=e("HelloWorld");return t(),n("div",C,[l(c,{class:"menu"}),l(p,{class:"content"})])};const L={setup(){const e=r({pool:[1,2,3,4,5,6,7,8],activePool:[]}),t=o(0),n=o(!1),a=o(!1);return{cache:e,count:t,animationStart:()=>{const n=e.pool.pop();n&&(e.activePool.unshift(n),t.value++)},animationEnd:()=>{const t=e.activePool.pop();t&&e.pool.unshift(t)},rotate:n,rotateReverse:a}}},S=c('<div class="card"><h3>动画基本属性</h3><table border="1"><thead><tr><th>值</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>animation-name</td><td>规定需要绑定到选择器的 keyframe 名称。</td><td>none</td></tr><tr><td>animation-duration</td><td>规定完成动画所花费的时间，以秒或毫秒计。</td><td>0</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线。</td><td>ease</td></tr><tr><td>animation-delay</td><td>规定在动画开始之前的延迟。</td><td>0</td></tr><tr><td>animation-iteration-count</td><td>规定动画应该播放的次数。</td><td>1</td></tr><tr><td>animation-direction</td><td>规定是否应该轮流反向播放动画。</td><td>normal</td></tr><tr><td>animation-play-state</td><td>动画的播放状态。</td><td>running</td></tr><tr><td>animation-fill-mode</td><td>规定动画在播放之前或之后,其动画效果是否可见</td><td>none</td></tr></tbody></table></div>',1),V={class:"card",style:{"padding-bottom":"400px"}},_=l("h3",null,"曲线运动的合成",-1),X=l("p",null," 通过运动的合成可以实现元素的复杂运动，比如曲线运动。 CSS运动的合成与物理学中一个物体运动状态的合成同理，比如一个物体的抛物线曲线的形成可以看做是是它的水平方向的运动状态和垂直方向的运动状态合成的结果。 CSS运动合成的核心就是在需要添加运动效果的元素外层加上一个包裹层，该元素与包裹层元素分别加上不同的运动状态，以达到运动合成的目的。 ",-1),E=l("br",null,null,-1),M=l("p",null,"抛物线案例",-1),z=l("h3",{style:{"margin-top":"20px"}},"效果",-1),Y=l("p",null," 点击➕会有小球的运动轨迹显示 ",-1),q={class:"relative"},P=l("iframe",{height:"500",style:{width:"100%","margin-top":"450px"},scrolling:"no",title:"compose",src:"https://codepen.io/toyshome/embed/rNMMLeQ?height=265&theme-id=light&default-tab=css,result",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},"\n            See the Pen <a href='https://codepen.io/toyshome/pen/rNMMLeQ'>compose</a> by wangliu\n            (<a href='https://codepen.io/toyshome'>@toyshome</a>) on <a href='https://codepen.io'>CodePen</a>.\n            ",-1),R=l("br",null,null,-1),U=l("p",null,"旋转抵消案例",-1),N=h("rotate-animation"),G=h("rotate-reverse-animation"),D=l("iframe",{height:"500",style:{width:"100%","margin-top":"400px"},scrolling:"no",title:"rotate",src:"https://codepen.io/toyshome/embed/wvzopeX?height=265&theme-id=light&default-tab=css,result",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},"\n            See the Pen <a href='https://codepen.io/toyshome/pen/wvzopeX'>rotate</a> by wangliu\n            (<a href='https://codepen.io/toyshome'>@toyshome</a>) on <a href='https://codepen.io'>CodePen</a>.\n            ",-1);L.render=function(a,o,r,c,h,u){const m=e("van-icon"),f=e("van-checkbox"),y=e("van-col"),g=e("van-row");return t(),n("div",null,[S,l("div",V,[_,X,E,M,z,Y,l("div",q,[l(m,{name:"add",onClick:c.animationStart,style:{"font-size":"30px",cursor:"pointer"}},null,8,["onClick"]),l(m,{name:"cart-o",badge:c.count,class:"cart"},null,8,["badge"]),(t(!0),n(d,null,i(c.cache.activePool,(e=>(t(),n("div",{class:"parabola-x",key:e},[l("div",{class:"parabola-y",onAnimationEnd:o[1]||(o[1]=p(((...e)=>c.animationEnd&&c.animationEnd(...e)),["stop"]))},null,32)])))),128))]),P,R,U,l(g,{gutter:"20"},{default:s((()=>[l(y,null,{default:s((()=>[l(f,{modelValue:c.rotate,"onUpdate:modelValue":o[2]||(o[2]=e=>c.rotate=e),shape:"square"},{default:s((()=>[N])),_:1},8,["modelValue"])])),_:1}),l(y,null,{default:s((()=>[l(f,{modelValue:c.rotateReverse,"onUpdate:modelValue":o[3]||(o[3]=e=>c.rotateReverse=e),shape:"square"},{default:s((()=>[G])),_:1},8,["modelValue"])])),_:1})])),_:1}),l("div",{class:["rotate",{"rotate-animation":c.rotate}]},[l("div",{class:["inner",{"rotate-reverse-animation":c.rotateReverse}]},"正",2)],2),D])])};const H={setup(){const e=o(0),t=o("1"),n=o("https://toyshome.github.io/animation/dist/assets/zuobiao.27b74acc.png"),a=o(!1),s=r({checked:[],classList:["back","left","right","top","bottom"]});return{persp:e,imgSrc:n,paused:a,onChange:t=>e.value=t,checked:s,radio:t,radioChange:()=>{s.checked=[]}}}},j={class:"card"},A=l("h3",null,"CSS中的3d坐标系",-1),B=l("p",null,"- Z轴正方向垂直屏幕向外",-1),O=l("p",null,"- 坐标系并非固定不变的，比如某个元素进行了沿x轴90度的旋转，那么该元素的对应坐标系也会跟着同样的方向旋转90度",-1),W=l("p",null,[h("- 开启3d视图需要CSS属性"),l("span",{class:"hl"},"transform-style: preserve-3d;")],-1),F=h("旋转+平移"),I=h("基点修改+旋转"),Q=h("上"),T=h("左"),$=h("下"),K=h("右"),Z=h("后"),J=h("暂停"),ee=l("div",{class:"cube"},null,-1),te=l("iframe",{height:"500",style:{width:"100%"},scrolling:"no",title:"css3d",src:"https://codepen.io/toyshome/embed/xxEEOMG?height=265&theme-id=light&default-tab=css,result",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},"\n            See the Pen <a href='https://codepen.io/toyshome/pen/xxEEOMG'>css3d</a> by wangliu\n            (<a href='https://codepen.io/toyshome'>@toyshome</a>) on <a href='https://codepen.io'>CodePen</a>.\n            ",-1);H.render=function(a,o,r,c,p,h){const m=e("van-radio"),f=e("van-radio-group"),y=e("van-checkbox"),g=e("van-checkbox-group"),v=e("van-col"),x=e("van-row");return t(),n("div",null,[l("div",j,[A,B,O,W,l("img",{src:c.imgSrc},null,8,["src"]),l(x,{type:"flex",justify:"space-between"},{default:s((()=>[l(v,{span:"10"},{default:s((()=>[l(f,{modelValue:c.radio,"onUpdate:modelValue":o[1]||(o[1]=e=>c.radio=e),direction:"horizontal",onChange:c.radioChange},{default:s((()=>[l(m,{name:"1"},{default:s((()=>[F])),_:1}),l(m,{name:"2"},{default:s((()=>[I])),_:1})])),_:1},8,["modelValue","onChange"]),l(g,{modelValue:c.checked.checked,"onUpdate:modelValue":o[2]||(o[2]=e=>c.checked.checked=e),direction:"horizontal",style:{margin:"20px 0"}},{default:s((()=>[l(y,{name:"top",shape:"square"},{default:s((()=>[Q])),_:1}),l(y,{name:"left",shape:"square"},{default:s((()=>[T])),_:1}),l(y,{name:"bottom",shape:"square"},{default:s((()=>[$])),_:1}),l(y,{name:"right",shape:"square"},{default:s((()=>[K])),_:1}),l(y,{name:"back",shape:"square"},{default:s((()=>[Z])),_:1}),l(y,{name:"paused",shape:"square"},{default:s((()=>[J])),_:1})])),_:1},8,["modelValue"]),l("div",{class:{"three-dimensional-animate":c.checked.checked.includes(""),"three-dimensional":!0}},[ee,(t(!0),n(d,null,i(c.checked.classList,(e=>(t(),n("div",{key:e,class:{cube:!0,[e]:e,[e+"-animation"+(1==c.radio?"":"_og")]:c.checked.checked.includes(e),paused:c.checked.checked.includes("paused")}},null,2)))),128))],2)])),_:1}),l(v,{span:"13"},{default:s((()=>[1==c.radio?(t(),n("code",{key:0,textContent:u("// 初始状态立方体6个面重合叠加在一个平面\n.cube {\n    width: 200px;\n    height: 200px;\n    position: absolute;\n    opacity: 0.7;\n}\n\n// 展开上面的平面\n.top-animation {\n    animation: top 3s linear forwards;\n}\n// 方式一：通过旋转、平移到对应的面，此处以上面的平面为例\n@keyframes top {\n    33% {\n        transform: rotateX(90deg)\n    }\n\n    66% {\n        transform: rotateX(90deg) translate3d(0, -100px, 0);\n    }\n\n    to {\n        transform: rotateX(90deg) translate3d(0, -100px, 100px);\n    }\n}\n")},null,8,["textContent"])):(t(),n("code",{key:1,textContent:u("// 初始状态立方体6个面重合叠加在一个平面\n.cube {\n    width: 200px;\n    height: 200px;\n    position: absolute;\n    opacity: 0.7;\n}\n\n// 展开上面的平面\n.top-animation {\n    transform-origin: center 0;\n    animation: top 3s linear forwards;\n}\n// 方式二：通过修改tranfrom-origin再旋转，此处以上面的平面为例\n@keyframes top {\n    to {\n        transform: rotateX(90deg);\n    }\n}\n")},null,8,["textContent"]))])),_:1})])),_:1}),te])])};const ne={setup:()=>({dasharray:o(""),dashoffset:o("")})},ae={class:"card"},oe=l("h3",null,"SVG 动画",-1),se=l("p",null,"SVG有一些预定义的形状元素，可被开发者使用和操作",-1),le=l("p",null,"🌰：画一个矩形",-1),re=l("svg",null,[l("rect",{width:"300",height:"100",fill:"#000"})],-1),de=l("p",null,"<path> 标签用来定义路径, 路径具体是怎么绘制的又由d属性控制，d属性包含以下指令：",-1),ie=l("p",null,"下面展示画一个三角形(不使用预定义的三角形元素)",-1),ce={class:"hl"},pe=l("p",null," d属性中每一个字母代表一个指令，后面跟着的数字代表指令的参数，指令的分割也是以字母为基准的",-1),he=l("p",null,' d="M150 30 L250 200 H50 z" 可以分为4个指令:',-1),ue=l("p",null,"① M150 30: 移动到坐标(150,30)处",-1),me=l("p",null,"② L250 200: 从上一个坐标点画路径到坐标(250, 200)",-1),fe=l("p",null,"③ H50: 从上一个坐标点水平画到X坐标为5，Y保持不变的坐标处",-1),ye=l("p",null,"④ Z: 闭合路径，即首尾相连",-1),ge=l("svg",{width:"1000",height:"250"},[l("text",{stroke:"red",x:"130",y:"20"},"(150, 30)"),l("text",{stroke:"red",x:"230",y:"220"},"(250, 200)"),l("text",{stroke:"red",x:"20",y:"220"},"(50, 200)"),l("path",{stroke:"#000000","stroke-width":"5","stroke-linecap":"round",fill:"transparent",class:"path1",d:"M150 30 L250 200 H50 z"})],-1),ve=c('<h3>SVG路径与CSS</h3><p>让静态的SVG路径元素动起来，我们首先要利用SVG的两个属性：<span class="hl">stroke-dasharray</span> 和 <span class="hl">stroke-dashoffset</span></p><p><span class="hl">stroke-dasharray:</span></p><p style="color:#e4393c;">stroke-dasharray为一个参数时： 其实是表示虚线长度和每段虚线之间的间距</p><p>如：stroke-dasharray = &#39;10&#39; 表示：虚线长10，间距10，然后重复 虚线长10，间距10</p><p style="color:#e4393c;">两个参数或者多个参数时：一个表示长度，一个表示间距</p><p>如：stroke-dasharray = &#39;10, 5&#39; 表示：虚线长10，间距5，然后重复 虚线长10，间距5</p><p>如：stroke-dasharray = &#39;20, 10, 5&#39; 表示：虚线长20，间距10，虚线长5，接着是间距20，虚线10，间距5，之后开始如此循环</p><div><img src="https://pic3.zhimg.com/80/v2-e7241a8962fee8e1e344faa248cade72_1440w.jpg" style="width:600px;"></div><p><span class="hl">stroke-dashoffset：</span></p><p>这个属性是相对于起始点的偏移，正数偏移x值的时候，相当于往左移动了x个长度单位，负数偏移x的时候，相当于往右移动了x个长度单位。</p><p>需要注意的是，不管偏移的方向是哪边，要记得dasharray 是循环的，也就是 虚线-间隔-虚线-间隔。</p><p>这个属性要搭配stroke-dashoffset才能看得出来效果，非虚线的话，是无法看出偏移的。</p>',13),xe=l("span",null,"stroke-dasharray:",-1),ke=l("span",null,"stroke-dashoffset:",-1),be={width:"1000px",height:"30px"},we=l("iframe",{height:"500",style:{width:"100%"},scrolling:"no",title:"BaLLLWq",src:"https://codepen.io/toyshome/embed/BaLLLWq?height=265&theme-id=light&default-tab=html,result",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},"\n            See the Pen <a href='https://codepen.io/toyshome/pen/BaLLLWq'>BaLLLWq</a> by wangliu\n            (<a href='https://codepen.io/toyshome'>@toyshome</a>) on <a href='https://codepen.io'>CodePen</a>.\n            ",-1);ne.render=function(e,a,o,s,r,d){return t(),n("div",null,[l("div",ae,[oe,se,l("code",{textContent:u("矩形 <rect>\n圆形 <circle>\n椭圆 <ellipse>\n线 <line>\n折线 <polyline>\n多边形 <polygon>\n路径 <path>")},null,8,["textContent"]),le,l("code",{textContent:u('<svg>\n    <rect width="300" height="100" fill="#000"/>\n</svg>')},null,8,["textContent"]),re,de,l("code",{textContent:u("M = moveto(M X,Y) ：将画笔移动到指定的坐标位置\nL = lineto(L X,Y) ：画直线到指定的坐标位置\nH = horizontal lineto(H X)：画水平线到指定的X坐标位置\nV = vertical lineto(V Y)：画垂直线到指定的Y坐标位置\nC = curveto(C X1,Y1,X2,Y2,ENDX,ENDY)：三次贝赛曲线\nS = smooth curveto(S X2,Y2,ENDX,ENDY)：平滑曲率\nQ = quadratic Belzier curve(Q X,Y,ENDX,ENDY)：二次贝赛曲线\nT = smooth quadratic Belzier curveto(T ENDX,ENDY)：映射\nA = elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y)：弧线\nZ = closepath()：关闭路径")},null,8,["textContent"]),ie,l("div",ce,[l("code",{textContent:u('<svg width="1000" height="250">\n    <path stroke="#000000" stroke-width="5" stroke-linecap="round" fill="transparent" d="M150 30 L250 200 H50 z"></path>\n</svg>')},null,8,["textContent"])]),pe,he,ue,me,fe,ye,ge,ve,l("p",null,[xe,m(l("input",{type:"text","onUpdate:modelValue":a[1]||(a[1]=e=>s.dasharray=e),onChange:a[2]||(a[2]=e=>s.dasharray.value===e)},null,544),[[f,s.dasharray]]),ke,m(l("input",{type:"text","onUpdate:modelValue":a[3]||(a[3]=e=>s.dashoffset=e),onChange:a[4]||(a[4]=e=>s.dashoffset.value===e)},null,544),[[f,s.dashoffset]])]),(t(),n("svg",be,[l("line",{x1:"0",y1:"0",x2:"500",y2:"0",stroke:"#000","stroke-width":"20","stroke-dasharray":s.dasharray,"stroke-dashoffset":s.dashoffset},null,8,["stroke-dasharray","stroke-dashoffset"])])),we])])};const Ce=[{path:"/",redirect:"/compose"},{path:"/compose",component:L,meta:{menuIndex:0}},{path:"/css3d",component:H,meta:{menuIndex:1}},{path:"/svg",component:ne,meta:{menuIndex:2}}],Le=y({history:g(),routes:Ce}),Se=v(w);Se.use(x),Se.use(Le),Se.mount("#app");
